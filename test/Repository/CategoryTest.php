<?php

declare(strict_types=1);

namespace AppTest\Repository;

use App\Contract\Entity;
use App\Seed\Category as CategorySeed;
use PHPUnit\Framework\TestCase;
use App\Repository\Category as CategoryRepository;
use App\Entity\Category as CategoryEntity;

class CategoryTest extends TestCase
{

    /**
     * @var \App\Repository\Category categoryRepository
     */
    private $categoryRepository;
    private $entityManager;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->categoryRepository = new CategoryRepository();
        $this->entityManager = GetEntityManager();

    }

    public static function setUpBeforeClass()
    {
        /* trucatate all table */
        $entityManager = GetEntityManager();
        $metaData = $entityManager->getMetadataFactory()->getAllMetadata();
        $tool = new \Doctrine\ORM\Tools\SchemaTool($entityManager);
        $tool->dropSchema($metaData);
        $tool->createSchema($metaData);
    }

    public static function tearDownAfterClass()
    {
        // Depois da classe executar todos os testes reset
    }

    public function testIfReturnIsCategoryEntityAndSave()
    {
        $category = new CategoryEntity();
        $category->setName(CategorySeed::$data[1]);
        $category = $this->categoryRepository->save($category);
        $this->assertInstanceOf(CategoryEntity::class, $category);
    }

    public function testIfReturnIsEntityAndSave()
    {
        $category = new CategoryEntity();
        $category->setName(CategorySeed::$data[2]);
        $category = $this->categoryRepository->save($category);
        $this->assertInstanceOf(Entity::class, $category);
    }

    public function testIfReturnIsEntityAndUpdate()
    {
        $category = new CategoryEntity();
        $category->setName(CategorySeed::$data[4]);
        $category->setId(2);
        $category = $this->categoryRepository->save($category);
        $this->assertInstanceOf(Entity::class, $category);
    }

    public function testGetById()
    {
        $category = $this->categoryRepository->getById(1);
        $this->assertInstanceOf(Entity::class, $category);
        $this->assertInstanceOf(CategoryEntity::class, $category);
    }

    public function testGetAllIfReturnIsArray()
    {
        $category = $this->categoryRepository->getAll();
        $this->assertInternalType('array', $category);
    }

    public function testGetOneByIfReturnIsCategoryEntity()
    {
        $category = $this->categoryRepository->getOneBy();
        $this->assertInstanceOf(CategoryEntity::class, $category);
    }

    public function testIfReturnIsCategoryRepository()
    {
        $category = $this->categoryRepository->remove(1);
        $this->assertInstanceOf(CategoryRepository::class, $category);
    }

}