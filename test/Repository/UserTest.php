<?php

declare(strict_types=1);

namespace AppTest\Repository;

use App\Contract\Entity;
use App\Seed\User as UserSeed;
use PHPUnit\Framework\TestCase;
use App\Repository\User as UserRepository;
use App\Entity\User as UserEntity;

class UserTest extends TestCase
{

    /**
     * @var \App\Repository\User UserRepository
     */
    private $UserRepository;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->UserRepository = new UserRepository();

    }

    public function testIfReturnIsUserEntityAndSave()
    {
        $category = new UserEntity();
        $category->setName(UserSeed::$data[1]['name']);
        $category->setEmail(UserSeed::$data[1]['email']);
        $category = $this->UserRepository->save($category);
        $this->assertInstanceOf(UserEntity::class, $category);
    }

    public function testIfReturnIsEntityAndSave()
    {
        $category = new UserEntity();
        $category->setName(UserSeed::$data[2]['name']);
        $category->setEmail(UserSeed::$data[2]['email']);
        $category = $this->UserRepository->save($category);
        $this->assertInstanceOf(Entity::class, $category);
    }

    public function testIfReturnIsEntityAndUpdate()
    {
        $category = new UserEntity();
        $category->setName(UserSeed::$data[3]['name']);
        $category->setEmail(UserSeed::$data[3]['email']);
        $category->setId(2);
        $category = $this->UserRepository->save($category);
        $this->assertInstanceOf(Entity::class, $category);
    }

    public function testGetById()
    {
        $category = $this->UserRepository->getById(1);
        $this->assertInstanceOf(Entity::class, $category);
        $this->assertInstanceOf(UserEntity::class, $category);
    }

    public function testGetAllIfReturnIsArray()
    {
        $category = $this->UserRepository->getAll();
        $this->assertInternalType('array', $category);
    }

    public function testGetOneByIfReturnIsUserEntity()
    {
        $category = $this->UserRepository->getOneBy();
        $this->assertInstanceOf(UserEntity::class, $category);
    }

    public function testIfReturnIsUserRepository()
    {
        $category = $this->UserRepository->remove(1);
        $this->assertInstanceOf(UserRepository::class, $category);
    }

}