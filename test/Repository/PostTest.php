<?php

declare(strict_types=1);

namespace AppTest\Repository;

use App\Contract\Entity;
use App\Seed\Post as PostSeed;
use PHPUnit\Framework\TestCase;
use App\Repository\Post as PostRepository;
use App\Entity\Post as PostEntity;

class PostTest extends TestCase
{

    /**
     * @var \App\Repository\Category PostRepository
     */
    private $PostRepository;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->PostRepository = new PostRepository();

    }

    public function testIfReturnIsPostEntityAndSave()
    {
        $category = new PostEntity();
        $category->setTitle(PostSeed::$data[1]['title']);
        $category->setContext(PostSeed::$data[1]['context']);
        $category = $this->PostRepository->save($category);
        $this->assertInstanceOf(PostEntity::class, $category);

    }

    public function testIfReturnIsEntityAndSave()
    {
        $category = new PostEntity();
        $category->setTitle(PostSeed::$data[2]['title']);
        $category->setContext(PostSeed::$data[2]['context']);
        $category = $this->PostRepository->save($category);
        $this->assertInstanceOf(Entity::class, $category);
    }

    public function testIfReturnIsEntityAndUpdate()
    {
        $category = new PostEntity();
        $category->setTitle(PostSeed::$data[3]['title']);
        $category->setContext(PostSeed::$data[3]['context']);
        $category->setId(2);
        $category = $this->PostRepository->save($category);
        $this->assertInstanceOf(Entity::class, $category);
    }

    public function testGetById()
    {
        $category = $this->PostRepository->getById(1);
        $this->assertInstanceOf(Entity::class, $category);
        $this->assertInstanceOf(PostEntity::class, $category);
    }

    public function testGetAllIfReturnIsArray()
    {
        $category = $this->PostRepository->getAll();
        $this->assertInternalType('array', $category);
    }

    public function testGetOneByIfReturnIsPostEntity()
    {
        $category = $this->PostRepository->getOneBy();
        $this->assertInstanceOf(PostEntity::class, $category);
    }

    public function testIfReturnIsPostRepository()
    {
        $category = $this->PostRepository->remove(1);
        $this->assertInstanceOf(PostRepository::class, $category);
    }

}